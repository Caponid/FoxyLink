// This file is part of Update.Express.
// Copyright © 2016 Petro Bazeliuk.
// 
// Update.Express is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as 
// published by the Free Software Foundation, either version 3 
// of the License, or any later version.
// 
// Update.Express is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public 
// License along with Update.Express. If not, see <http://www.gnu.org/licenses/>.

#Область ПрограммныйИнтерфейс

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьПользователю()



// Создает копию значения типа Структура.
//
// Параметры:
//  СтруктураИсточник – Структура – копируемая структура.
// 
// Возвращаемое значение:
//  Структура - копия исходной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции // СкопироватьСтруктуру()

// Создает копию значения типа Соответствие.
//
// Параметры:
//  СоответствиеИсточник – Соответствие - соответствие, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Соответствие - копия исходного соответствия.
//
Функция СкопироватьСоответствие(СоответствиеИсточник) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СоответствиеРезультат;

КонецФункции // СкопироватьСоответствие()

// Создает копию значения типа Массив.
//
// Параметры:
//  МассивИсточник – Массив - массив, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Массив - копия исходного массива.
//
Функция СкопироватьМассив(МассивИсточник) Экспорт
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент));
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции // СкопироватьМассив()

// Создает копию значения типа СписокЗначений.
//
// Параметры:
//  СписокИсточник – СписокЗначений - список значений, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  СписокЗначений - копия исходного списка значений.
//
Функция СкопироватьСписокЗначений(СписокИсточник) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции // СкопироватьСписокЗначений()

// Создает копию экземпляра указанного объекта.
//
// Параметры:
//  Источник - Произвольный - объект, который необходимо скопировать.
//
// Возвращаемое значение:
//  Произвольный - копия объекта, переданного в параметре Источник.
//
// Примечание:
//  Функцию нельзя использовать для объектных типов (СправочникОбъект, ДокументОбъект и т.п.).
//
Функция СкопироватьРекурсивно(Источник) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("Структура") Тогда
		Приемник = СкопироватьСтруктуру(Источник);
	ИначеЕсли ТипИсточника = Тип("Соответствие") Тогда
		Приемник = СкопироватьСоответствие(Источник);
	ИначеЕсли ТипИсточника = Тип("Массив") Тогда
		Приемник = СкопироватьМассив(Источник);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = СкопироватьСписокЗначений(Источник);
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ИначеЕсли ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Приемник = Источник.Скопировать();
	#КонецЕсли
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции // СкопироватьРекурсивно()

// Получает строку, содержащую имена колонок, разделенные символом разделителя.
//
// Параметры:
//	Колонки - Произвольный - коллекция, которая содержит имена колонок.
//	Разделитель - Строка - разделитель, который вставляется в строку между именами колонок коллекции.
//
// Возвращаемое значение:
//	Строка - Строка, содержащая имена колонок разделенные резделителем.
//
Функция КоллекцияКолонокВСтроку(Колонки, Разделитель = ",") Экспорт
	
	Результат = "";
	
	Для Каждого Колонка Из Колонки Цикл
		
		СимволРазделителя = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + СимволРазделителя + Колонка.Имя;
		
	КонецЦикла;
	
	Возврат Результат;
			
КонецФункции // КоллекцияКолонокВСтроку()


// Проверяет символ есть ли он символом.
//
// Параметры:
//	Символ - Строка - символ который необходимо проверить.
//
// Возвращаемое значение:
//	Булево - Истина, если символ есть действительно символом; Ложь - в противном случае.
//
Функция ЭтоСимвол(Символ) Экспорт	
	Код = КодСимвола(Символ);
	Возврат ?(Код <= 47 ИЛИ (Код >= 58 И Код <= 64) ИЛИ (Код >= 91 И Код <= 96) ИЛИ (Код >= 123 И Код <= 126), Ложь, Истина);	
КонецФункции // ЭтоСимвол()

// Проверяет символ есть ли он цифрой.
//
// Параметры:
//	Символ - Строка - символ который необходимо проверить.
//
// Возвращаемое значение:
//	Булево - Истина, если символ есть действительно цифрой; Ложь - в противном случае.
//
Функция ЭтоЦифра(Символ) Экспорт	
 	Код = КодСимвола(Символ);
	Возврат ?(Код <= 47 Or Код >= 58, Ложь, Истина);	
КонецФункции // ЭтоЦифра()

// Проверяет символ есть ли он буквой.
//
// Параметры:
//	Символ - Строка - символ который необходимо проверить.
//
// Возвращаемое значение:
//	Булево - Истина, если символ есть действительно буквой; Ложь - в противном случае.
//
Функция ЭтоБуква(Символ) Экспорт	
   	Код = КодСимвола(Символ);
	Возврат ?(Код <= 64 ИЛИ (Код >= 91 И Код <= 96) ИЛИ (Код >= 123 И Код <= 126), Ложь, Истина);	
КонецФункции // ЭтоБуква()

// Проверяет символ есть ли он латинской буквой.
//
// Параметры:
//	Символ - Строка - символ который необходимо проверить.
//
// Возвращаемое значение:
//	Булево - Истина, если символ есть действительно латинской буквой; Ложь - в противном случае.
//
Функция ЭтоЛатинскаяБуква(Символ) Экспорт
	Код = КодСимвола(Символ);	
	Возврат ?((Код > 64 И Код < 91) ИЛИ (Код > 96 И Код < 123), Истина, Ложь);	
КонецФункции // ЭтоЛатинскаяБуква() 

#КонецОбласти // ПрограммныйИнтерфейс