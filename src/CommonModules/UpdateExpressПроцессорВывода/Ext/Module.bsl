/////////////////////////////////////////////////////////////////////////
//                                                                     //
// This Source Code Form is subject to the terms of the Mozilla Public //
// License, v. 2.0. If a copy of the MPL was not distributed with this //
// file, You can obtain one at http://mozilla.org/MPL/2.0/.            //
//                                                                     //
/////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура Вывести(ЗаписьJSON, 
	СхемаКомпоновкиДанных, 
	НастройкиКомпоновкиДанных, 
	ВозможностьПрерыванияПользователем = Ложь) Экспорт
	
	
	// Создание макета компоновки данных из схемы и настроек
	Параметры = Новый Структура;
	Параметры.Вставить("ТипМакета",
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	МакетКомпоновкиДанных = UpdateExpressКомпоновкаДанных
		.СоздатьМакетКомпоновкиДанных(СхемаКомпоновкиДанных, 
			НастройкиКомпоновкиДанных, Параметры);
			
			
	// Инициализация колонок макетов и настроек макетов
	КэшКолонокМакетов = СоздатьКэшКолонокМакетов(НастройкиКомпоновкиДанных,
		МакетКомпоновкиДанных, МакетКомпоновкиДанных.Тело);
		
	КэшНастроекМакетов = СоздатьКэшНастроекМакетов(МакетКомпоновкиДанных, 
		МакетКомпоновкиДанных.Тело);	
		
		
	// Инициализация процессора компоновки данных
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	
	// Начать вывод элементов из процессора компоновки данных
	Уровень = Неопределено;
	Начало = ТипЭлементаРезультатаКомпоновкиДанных.Начало;
	Конец = ТипЭлементаРезультатаКомпоновкиДанных.Конец;
	НачалоИКонец = ТипЭлементаРезультатаКомпоновкиДанных.НачалоИКонец;
	
	Пока Истина Цикл
		
		Элемент = ПроцессорКомпоновкиДанных.Следующий();		
		Если Элемент = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		Если Элемент.ТипЭлемента = Начало Тогда
			
			Элемент = ПроцессорКомпоновкиДанных.Следующий();		
			Если Элемент.ТипЭлемента = Начало Тогда
				
				Элемент = ПроцессорКомпоновкиДанных.Следующий();
				Если Элемент.ТипЭлемента = НачалоИКонец Тогда
					
					Если Уровень = Неопределено Тогда
						Уровень = 0;
					Иначе
						Уровень = Уровень + 1;
					КонецЕсли;
					
					ЗаписьJSON.ЗаписатьИмяСвойства(КэшНастроекМакетов[Элемент.Макет]);
					ЗаписьJSON.ЗаписатьНачалоМассива();
					
					НачатьЗаписьОбъекта(Элемент, ЗаписьJSON, КэшКолонокМакетов);
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Уровень <> Неопределено Тогда
			
			Если Элемент.ТипЭлемента = Конец Тогда
				
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
				Элемент = ПроцессорКомпоновкиДанных.Следующий();
				Если Элемент.ТипЭлемента = Конец Тогда
					
					Уровень = Уровень - 1;
					ЗаписьJSON.ЗаписатьКонецМассива();
					
					Если Уровень < 0 Тогда
						Уровень = Неопределено;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
		
			КонецЕсли;
			
			Если Не ПустаяСтрока(Элемент.Макет) Тогда
				НачатьЗаписьОбъекта(Элемент, ЗаписьJSON, КэшКолонокМакетов);					
			КонецЕсли;

		КонецЕсли;
					
	КонецЦикла;
				
КонецПроцедуры // Вывести()
 
#КонецОбласти // ПрограммныйИнтерфейс

#Область СервисныеПроцедурыИФункции

Процедура НачатьЗаписьОбъекта(ЭлементРезультата, ЗаписьJSON, КэшКолонокМакетов)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	Для Каждого Колонка Из КэшКолонокМакетов[ЭлементРезультата.Макет] Цикл
		ЗаписьJSON.ЗаписатьИмяСвойства(Колонка.Имя);
		ЗаписатьJSON(ЗаписьJSON,
			ЭлементРезультата.ЗначенияПараметров[Колонка.Ключ].Значение,
			,
			"ФункцияПреобразования",
			UpdateExpressПроцессорВыводаПовтИсп);
	КонецЦикла;	
	
КонецПроцедуры // НачатьЗаписьОбъекта()

// Только для внутреннего использования
Функция СоздатьКэшКолонокМакетов(НастройкиКомпоновкиДанных,
	МакетКомпоновкиДанных, 
	МакетКомпоновкиДанныхТело, 
	КэшКолонок = Неопределено,
	КэшРесурсов = Неопределено,
	КэшКолонокМакетов = Неопределено,
	КолонокиНаУдаление = Неопределено)
	
	Если КэшКолонок = Неопределено 
	  И  КэшРесурсов = Неопределено
	  И  КэшКолонокМакетов = Неопределено 
	  И  КолонокиНаУдаление = Неопределено Тогда
	  
		КэшКолонок = СоздатьКэшКолонок(МакетКомпоновкиДанных);
		КэшРесурсов = СоздатьКэшРесурсов(НастройкиКомпоновкиДанных);
		КэшКолонокМакетов = Новый Соответствие;
		КолонокиНаУдаление = Новый Соответствие;
		
	КонецЕсли;
		
	Для Каждого ЭлементТела Из МакетКомпоновкиДанныхТело Цикл
		
		Если ТипЗнч(ЭлементТела) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
			Продолжить;	
		КонецЕсли;
		
		КэшПорядокКолонок = Новый Массив;
		ОписаниеМакетаОбласти = ПолучитьОписаниеМакетОбласти(МакетКомпоновкиДанных, 
			ЭлементТела);
			
		КолонкиНаУдалениеИерархия = Новый Соответствие;
		Для Каждого Ячейка Из ОписаниеМакетаОбласти.Макет.Ячейки Цикл
				
			Если Ячейка.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Ключ = Строка(Ячейка.Значение);
			ПараметрОбластиВыражение = ПолучитьПараметрОбластиВыражение(
				ОписаниеМакетаОбласти, Ключ);
			Выражение = ПараметрОбластиВыражение.Выражение;
			
			Если ТипЗнч(ЭлементТела) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
				
				КолонкаНаУдаление = КолонокиНаУдаление[Ключ];
				Если КолонкаНаУдаление = Неопределено Тогда
					Результат = ПолучитьЭлементГруппировкиМакета(
						ЭлементТела.Группировка, 
						Выражение,
						Истина);	
				Иначе
					Результат = ПолучитьЭлементГруппировкиМакета(
						ЭлементТела.Группировка, 
						Выражение,
						Ложь);		
				КонецЕсли;
				
				//Если КэшРесурсов
				
				Если Результат = Неопределено Тогда
					//Если НЕ UpdateExpressПроцессорВыводаПовтИсп.ЭтоПолеРесурс(Выражение) Тогда
					//	Продолжить;
					//КонецЕсли;
					Если КэшРесурсов[КэшКолонок[ОписаниеМакетаОбласти.Имя][Ключ]] = Неопределено Тогда
						Продолжить;	
					КонецЕсли;
					
					
				Иначе
					КолонкиНаУдалениеИерархия.Вставить(Ключ, Выражение);	
				КонецЕсли;
					
			ИначеЕсли ТипЗнч(ЭлементТела) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				
				КолонкаНаУдаление = КолонокиНаУдаление[Ключ];
				Если КолонкаНаУдаление <> Неопределено Тогда
					Продолжить;	
				КонецЕсли;
				
			КонецЕсли;
			
			КлючИКолонка = Новый Структура;
			КлючИКолонка.Вставить("Ключ", Ключ);
			КлючИКолонка.Вставить("Имя", КэшКолонок[ОписаниеМакетаОбласти.Имя][Ключ]);
			КэшПорядокКолонок.Добавить(КлючИКолонка);
			
		КонецЦикла;
		
		КэшКолонокМакетов.Вставить(ОписаниеМакетаОбласти.Имя, 
			КэшПорядокКолонок);
		
		
		Если ЭлементТела.Тело.Количество() > 1 Тогда
						
			Для Каждого Колонка Из КолонокиНаУдаление Цикл
				КолонкиНаУдалениеИерархия.Вставить(Колонка.Ключ, Колонка.Значение);		
			КонецЦикла;
			
			СоздатьКэшКолонокМакетов(НастройкиКомпоновкиДанных,
				МакетКомпоновкиДанных, 
				ЭлементТела.Тело,
				КэшКолонок,
				КэшРесурсов,
				КэшКолонокМакетов,
				КолонкиНаУдалениеИерархия);		
			
		КонецЕсли;
			
	КонецЦикла;
		
	Возврат КэшКолонокМакетов;
	
КонецФункции // СоздатьКэшКолонокМакетов()

// Только для внутреннего использования
Функция СоздатьКэшНастроекМакетов(МакетКомпоновкиДанных,
	МакетКомпоновкиДанныхТело, 
	КэшНастроекМакетов = Неопределено)
	
	Если КэшНастроекМакетов = Неопределено Тогда
		КэшНастроекМакетов = Новый Соответствие;	
	КонецЕсли;
	
	Для Каждого ЭлементТела Из МакетКомпоновкиДанныхТело Цикл
		
		Если ТипЗнч(ЭлементТела) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
			Продолжить;	
		КонецЕсли;
		
		ОписаниеМакетаОбласти = ПолучитьОписаниеМакетОбласти(МакетКомпоновкиДанных, 
			ЭлементТела);
			
		КэшНастроекМакетов.Вставить(ОписаниеМакетаОбласти.Имя, 
			ЭлементТела.Имя);
			
		Если ЭлементТела.Тело.Количество() > 1 Тогда
			СоздатьКэшНастроекМакетов(МакетКомпоновкиДанных, 
				ЭлементТела.Тело,
				КэшНастроекМакетов);		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КэшНастроекМакетов;
	
КонецФункции // СоздатьКэшНастроекМакетов()

// Только для внутреннего использования
Функция СоздатьКэшКолонок(МакетКомпоновкиДанных)
	
	КэшКолонок = Новый Соответствие;
	ОсновнойМакет = МакетКомпоновкиДанных.Макеты.Найти("Макет1");
	Если ОсновнойМакет = Неопределено Тогда
		Возврат КэшКолонок;	
	КонецЕсли;
	
	ЯчейкиОсновногоМакета = ОсновнойМакет.Макет.Ячейки;
	Для Каждого Макет Из МакетКомпоновкиДанных.Макеты Цикл
		
		Если Макет = ОсновнойМакет Тогда
			Продолжить;	
		КонецЕсли;
		
		КэшКолонокПоМакету = Новый Соответствие; 
		Ячейки = Макет.Макет.Ячейки;
		Для Индекс = 0 По Ячейки.Количество() - 1 Цикл
			
			Ячейка = Ячейки[Индекс];
			Если Ячейка.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			
			Если ПустаяСтрока(Ячейка.Колонка) Тогда
				Значение = НормализироватьИмяКолонки(ЯчейкиОсновногоМакета[Индекс].Имя);	
			Иначе
				Значение = НормализироватьИмяКолонки(Ячейка.Колонка); 	
			КонецЕсли;
			
			КэшКолонокПоМакету.Вставить(Строка(Ячейка.Значение), Значение); 
				
		КонецЦикла;
		
		КэшКолонок.Вставить(Макет.Имя, КэшКолонокПоМакету);
	
	КонецЦикла;
	
	Возврат КэшКолонок; 
	
КонецФункции // СоздатьКэшКолонок() 

// Только для внутреннего использования
Функция СоздатьКэшРесурсов(НастройкиКомпоновкиДанных)
	
	КэшРесурсов	= Новый Соответствие;
	
	Элементы = НастройкиКомпоновкиДанных.Выбор.ДоступныеПоляВыбора.Элементы;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.Ресурс Тогда 
			КэшРесурсов.Вставить(Строка(Элемент.Поле), Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КэшРесурсов;
	
КонецФункции // СоздатьКэшРесурсов() 

// Только для внутреннего использования
Функция ПолучитьОписаниеМакетОбласти(МакетКомпоновкиДанных, ЭлементТела)
	
	Если ЭлементТела.Тело.Количество() = 0 Тогда
		СообщениеОбОшибке = НСтр(
			"en = '""DataCompositionTemplateAreaTemplate"" is not found!'; 
			|ru = '""МакетОбластиМакетаКомпоновкиДанных"" не найден!'; 
			|uk = '""МакетОбластиМакетаКомпоновкиДанных"" не знайдено!'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	МакетОбласти = ЭлементТела.Тело[0];
	Если ТипЗнч(МакетОбласти) <> Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
		СообщениеОбОшибке = НСтр(
			"en = 'The body does not contain ""DataCompositionTemplateAreaTemplate""!'; 
			|ru = 'Тело не содержит ""МакетОбластиМакетаКомпоновкиДанных""!'; 
			|uk = 'Тіло не містить ""МакетОбластиМакетаКомпоновкиДанных""!'");
		ВызватьИсключение СообщениеОбОшибке;	
	КонецЕсли;
	
	РезультатПоиска = МакетКомпоновкиДанных.Макеты.Найти(МакетОбласти.Макет);
	Если РезультатПоиска = Неопределено Тогда
		СообщениеОбОшибке = НСтр(
			"en = '""DataCompositionTemplateAreaTemplateDefinition"" is not found!'; 
			|ru = '""ОписаниеМакетаОбластиМакетаКомпоновкиДанных"" не найден!'; 
			|uk = '""ОписаниеМакетаОбластиМакетаКомпоновкиДанных"" не знайдено!'");
		ВызватьИсключение СообщениеОбОшибке;		
	КонецЕсли;
	
	Возврат РезультатПоиска; 
	
КонецФункции // ПолучитьОписаниеМакетОбласти()

// Только для внутреннего использования
Функция ПолучитьПараметрОбластиВыражение(ОписаниеМакетаОбласти, ИмяПараметра)
	
	РезультатПоиска = ОписаниеМакетаОбласти.Параметры.Найти(ИмяПараметра);
	Если РезультатПоиска = Неопределено Тогда
		СообщениеОбОшибке = НСтр(
			"en = '""DataCompositionExpressionAreaParameter"" is not found!'; 
			|ru = '""ПараметрОбластиВыражениеКомпоновкиДанных"" не найден!'; 
			|uk = '""ПараметрОбластиВыражениеКомпоновкиДанных"" не знайдено!'");
		ВызватьИсключение СообщениеОбОшибке;		
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции // ПолучитьПараметрОбластиВыражение()

// Только для внутреннего использования
Функция ПолучитьЭлементГруппировкиМакета(ГруппировкиМакета, Выражение, 
	ОбрабатыватьПодчиненные = Истина)
	
	Для Каждого ГруппировкаМакета Из ГруппировкиМакета Цикл
		
		Если ГруппировкаМакета.Выражение = Выражение Тогда
			Возврат ГруппировкаМакета;	
		КонецЕсли;
		
		Если ОбрабатыватьПодчиненные Тогда
			
			ПодчиненныеДанные = ГруппировкаМакета.Выражение + ".";
			// 8.3.6+
			//Позиция = СтрНайти(Значение, ПодчиненныеДанные);
			Позиция = Найти(Выражение, ПодчиненныеДанные);
			Если Позиция = 1 Тогда
				Возврат ГруппировкаМакета;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЭлементГруппировкиМакета()

// Только для внутреннего использования
Функция НормализироватьИмяКолонки(ПутьКДанным)
	
	ИмяКолонки = ПутьКДанным;
	ИмяКолонки = СтрЗаменить(ИмяКолонки, ".", "");
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "'", "_");
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "[", "_");
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "]", "_");
	
	Пока Истина Цикл
		
		// 8.3.6+
		//Позиция = СтрНайти(ИмяКолонки, "" "");
		Позиция = Найти(ИмяКолонки, " ");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ИмяКолонки = Сред(ИмяКолонки, 1, Позиция - 1) + ВРег(Сред(ИмяКолонки, Позиция + 1, 1)) + 
			Сред(ИмяКолонки, Позиция + 2, СтрДлина(ИмяКолонки) - Позиция + 2);
		
	КонецЦикла;
		
	Возврат ИмяКолонки;
	
КонецФункции // НормализироватьИмяКолонки()

#КонецОбласти // СервисныеПроцедурыИФункции