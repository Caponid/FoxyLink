// This file is part of Update.Express.
// Copyright © 2016 Petro Bazeliuk.
// 
// Update.Express is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as 
// published by the Free Software Foundation, either version 3 
// of the License, or any later version.
// 
// Update.Express is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public 
// License along with Update.Express. If not, see <http://www.gnu.org/licenses/>.

#Область ПрограммныйИнтерфейс

#Область БазовыеОперацииНастройкиОбменов

Функция ПолучитьНастройкиКомандыОбмена(Знач Наименование, 
	Знач НаименованиеКоманды) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	*
		|ИЗ
		|	Справочник.UpdateExpressНастройкиОбменов.Команды КАК Команды
		|ГДЕ
		|	Команды.Ссылка.Наименование = &Наименование
		|И	Команды.Ссылка.ОбменИспользуется = Истина
		|И 	Команды.Наименование = &НаименованиеКоманды
		|И 	Команды.Используется = Истина
		|";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("НаименованиеКоманды", НаименованиеКоманды);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка;	
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиКомандыОбмена()

#КонецОбласти // БазовыеОперацииНастройкиОбменов

#Область ОперацииСоСтроками

// Конвертирует строку в число и возвразает Число или Неопределено.
// 
// Параметры:
//  Строка - Строка - Конвертируемая строка
//
// Возвращаемое значение:
//  Число, Неопределено - Число или Неопределено из строки
//
Функция ПопытатьсяКонвертироватьСтрокуВЧисло(Строка) Экспорт
	
	Попытка
		Если ТипЗнч(Строка) = Тип("Строка") Тогда
			Возврат Число(Строка);
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции // ПопытатьсяКонвертироватьСтрокуВЧисло() 

// Возвращает массив строк по указаному разделителю
// 
// Параметры:
//  Строка 	  	- Строка - Строка которую необходимо разделить
//	Разделитель - Строка - Строчный разделитель
//
// Возвращаемое значение:
//  Массив - Массив - Возвращаемый массив строк
//
Функция РазделитьСтроку(Строка, Разделитель = ".") Экспорт
	
	МассивСтрок = Новый Массив;
    СтрокаСПереносами = СтрЗаменить(Строка, Разделитель, Символы.ПС);
    Для Инд = 1 По СтрДлина(СтрокаСПереносами) Цикл МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаСПереносами, Инд)); КонецЦикла;
    Возврат МассивСтрок; 
	
КонецФункции // РазделитьСтроку()

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

#КонецОбласти // ОперацииСоСтроками

#Область ОперацииСоСтруктурами

Функция ЭтоДополнительныеПараметры(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЭтоДополнительныеПараметры()

#КонецОбласти // ОперацииСоСтруктурами

#Область ОперацииXML

Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции // ПолучитьXML()

#КонецОбласти // ОперацииXML

#КонецОбласти // ПрограммныйИнтерфейс

#Область СервисныеПроцедурыИФункции

#Область ОперацииСоСтроками

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

#КонецОбласти // ОперацииСоСтроками

#КонецОбласти // СервисныеПроцедурыИФункции